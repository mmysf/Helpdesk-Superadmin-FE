name: Github Actions Development

on:
  push:
    branches:
    - dev
  workflow_dispatch:

env:
  IMAGE_NAME: "ghcr.io/${{ github.repository }}:dev-${{ github.sha }}"
  APP_NAME: "${{ github.event.repository.name }}"
  
jobs:
  build-dev:
    name: Build Development
    runs-on: ubuntu-24.04
    if: contains( github.ref, 'dev' )
    timeout-minutes: 30
    env:
      NEXT_PUBLIC_ACCESS_KEY: ${{ secrets.DEV_NEXT_PUBLIC_ACCESS_KEY }}
      NEXT_PUBLIC_BASE_URL: ${{ vars.APP_API_URL }}
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Lowercase Repository Name
      run: |
        echo "IMAGE_NAME=$(echo ${{ env.IMAGE_NAME }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    - name: Set up Docker Buildx 
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Docker image 
      uses: docker/build-push-action@v6
      with: 
        context: . 
        push: true 
        tags: ${{ env.IMAGE_NAME }} 
        cache-from: type=gha 
        cache-to: type=gha,mode=max
        build-args: |
          NEXT_PUBLIC_BASE_URL=${{ env.NEXT_PUBLIC_BASE_URL }}
          NEXT_PUBLIC_ACCESS_KEY=${{ env.NEXT_PUBLIC_ACCESS_KEY }}

  deploy-dev:
    name: Deploy Development
    runs-on: ubuntu-24.04
    needs: build-dev
    permissions:
      contents: read 
    env:
      DOKPLOY_API_URL: ${{ secrets.DOKPLOY_API_URL }}
      DOKPLOY_TOKEN: ${{ secrets.DOKPLOY_TOKEN }}
      DOKPLOY_SERVICE_APP_NAME: ${{ vars.APP_NAME }}

    steps:
      - name: Lowercase Repository Name
        run: |
          echo "IMAGE_NAME=$(echo ${{ env.IMAGE_NAME }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Get data from Dokploy
        id: dokployProjects
        uses: fjogeleit/http-request-action@v1
        with:
          url: "${{ env.DOKPLOY_API_URL }}/project.all"
          method: "GET"
          customHeaders: '{"x-api-key": "${{ env.DOKPLOY_TOKEN }}"}'
          responseFile: "./res.json"

      - name: Retrieve Application ID and Registry Credentials
        id: parsingResult
        run: |
          application=$(cat res.json | jq --arg appName "${{ env.DOKPLOY_SERVICE_APP_NAME }}" '.[].applications | map({applicationId,appName,username,password})[] | select(.appName==$appName)')
          echo "application_id=$(echo $application | jq -r '.applicationId')" >> $GITHUB_OUTPUT
          echo "cr_username=$(echo $application | jq -r '.username')" >> $GITHUB_OUTPUT
          echo "cr_password=$(echo $application | jq -r '.password')" >> $GITHUB_OUTPUT

      - name: Update Application on Dokploy
        uses: fjogeleit/http-request-action@v1
        with:
          url: "${{ env.DOKPLOY_API_URL }}/application.saveDockerProvider"
          method: "POST"
          customHeaders: '{"x-api-key": "${{ env.DOKPLOY_TOKEN }}"}'
          data: '{
            "registryUrl": "ghcr.io",
            "dockerImage": "${{ env.IMAGE_NAME }}",
            "applicationId": "${{ steps.parsingResult.outputs.application_id }}",
            "username": "${{ steps.parsingResult.outputs.cr_username }}",
            "password": "${{ steps.parsingResult.outputs.cr_password }}"
            }'

      - name: Deploy Application
        uses: fjogeleit/http-request-action@v1
        with:
          url: "${{ env.DOKPLOY_API_URL }}/application.deploy"
          method: "POST"
          customHeaders: '{"x-api-key": "${{ env.DOKPLOY_TOKEN }}"}'
          data: '{"applicationId": "${{ steps.parsingResult.outputs.application_id }}"}'